@page "/"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Amazon.DynamoDBv2.DataModel;
@using System.Text.Json;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using MudBlazor
@using MudBlazor.Services

<PageTitle>Index</PageTitle>

<h1 class="heading">Welcome to PetMate!</h1>
<div class="toggle-container">
    <button class="toggle-button" @onclick="ToggleMapView">Map View</button>
</div>

@*<input type="text" @bind="searchTerm" placeholder="Search..." @oninput="HandleTextBoxInput" />*@

<MudGrid>
    <MudItem xs="12" sm="6" md="4" AlignX="AlignCenter" AlignY="AlignCenter">
        <MudAutocomplete T="string" Label="Search Pets" Value="searchTerm" TextChanged="@HandleValueChanged"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </MudItem>
</MudGrid>
<div class="filter-container">
    <div class="filter" style="Margin: 10px;">
        <div style="width: 300px;">
            <p style="width: 100px;">Price Filter</p>
            <div style="display: flex; align-items: center;">
                <label for="minPrice" style="min-width: 80px;">Min Price:</label>
                <input type="range" min="0" max="1000" step="1" @bind="minSliderValue" @oninput="HandleMinSliderChange" style="flex: 1; width: 200%;" />
                <input @bind="minSliderValue" @oninput="HandleMinSliderChange" style="width: 50px; margin-left: 5px;" />
            </div>
            <br />
            <div style="display: flex; align-items: center;">
                <label for="maxPrice" style="min-width: 80px;">Max Price:</label>
                <input type="range" min="0" max="1000" step="1" @bind="maxSliderValue" @oninput="HandleMaxSliderChange" style="flex: 1; width: 200%;" />
                <input @bind="maxSliderValue" @oninput="HandleMaxSliderChange" style="width: 50px;" />
            </div>
        </div>
    </div>
    <div class="pet-container">

        @if (pets == null)
        {
            <div class="loading">
                <img src="DogRunning2.gif" alt="Loading...">
                <header>Loading...</header>
            </div>
        }
        else
        {
            <div class="pet-grid">
                @foreach (var pet in pets)
                    {
                        if (int.Parse(pet.Price) > maxSliderValue || (int.Parse(pet.Price) < minSliderValue))
                        {
                            continue;
                        }

                        if (pet.Status == "Created")
                        {
                        <div class="pet-card">
                            <SfCard Orientation="CardOrientation.Horizontal" ID="Trimmer" @onclick="@(() => NavigateToDetails(pet.Id, pet.Username))">
                                <CardStacked>
                                    <CardHeader Title="@pet.Name" />
                                    @{
                                        DateTime startDate;
                                        DateTime endDate;
                                        string formattedStartDate = "Invalid Date";
                                        string formattedEndDate = "Invalid Date";

                                        if (DateTime.TryParse(pet.StartDate, out startDate))
                                        {
                                            formattedStartDate = startDate.Date.ToShortDateString();
                                        }

                                        if (DateTime.TryParse(pet.EndDate, out endDate))
                                        {
                                            formattedEndDate = endDate.Date.ToShortDateString();
                                        }
                                        string formattedPrice = "$" + pet.Price.ToString();
                                    }
                                    <CardContent Content="@($"{formattedStartDate} - {formattedEndDate}")" />
                                    <CardContent Content="@formattedPrice" />
                                    <CardContent Content="Click to view pet!" />
                                </CardStacked>
                                <div class="card-image-container">
                                    <CardImage Image=@pet.PhotoUrl></CardImage>
                                </div>
                            </SfCard>
                        </div>
                    }

                }
            </div>
        }
    </div>
</div>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .heading {
        text-align: center;
        margin-top: 50px;
        font-size: 36px;
    }

    .sub-heading {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .loading {
        text-align: center;
        align-content: center;
        margin-top: 50px;
    }

    .toggle-container {
        text-align: center;
        margin-bottom: 20px;
    }

    .toggle-button {
        background-color: #4cb8c4;
        color: white;
        border: none;
        border-radius: 20px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .toggle-button:hover {
            background-color: #3bafbd;
        }

    .pet-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        padding: 20px;
    }

    .pet-card {
        width: 300px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s;
    }

        .pet-card:hover {
            transform: translateY(-5px);
        }

    .e-card-content {
        padding: 15px;
    }

        .e-card-content p {
            margin: 0;
        }
    .card-image-container {
        width: 100%; /* Set the width of the container */
        height: 200px; /* Set the height of the container */
        overflow: hidden;
    }
        .card-image-container img {
            width: 100%; /* Make the image fill the entire width of the container */
            height: auto; /* Maintain the aspect ratio of the image */
            object-fit: cover; /* Scale the image while preserving its aspect ratio, covering the entire container */
        }

    .filter-container {
        display: flex;
        justify-content: space-between;
    }

    .filter {
        width: 300px;
    }

    .pet-container {
        flex-grow: 1; /* This allows the pet grid to grow and take up remaining space */
        margin-left: 20px; /* Adjust margin as needed */
    }
</style>



@code {
    private double minSliderValue { get; set; } = 0; // Variable to bind to the slider value
    private double maxSliderValue { get; set; } = 1000; // Variable to bind to the slider value


    // Method to handle slider value change
    private void HandleMinSliderChange(ChangeEventArgs e)
    {
        // Update the slider value with the new value from the input
        try
        {
            if (e.Value != null)
            {
                minSliderValue = Convert.ToDouble(e.Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error with Min Slider value:", ex.Message);
            minSliderValue = 0.0;
        }

    }

    private void HandleMaxSliderChange(ChangeEventArgs e)
    {
        // Update the slider value with the new value from the input
        try
        {
            if (e.Value != null)
            {
                maxSliderValue = Convert.ToDouble(e.Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error with Max Slider value:", ex.Message);
            maxSliderValue = 0.0;
        }
    }

    private bool resetValueOnEmptyText;
    private string value2;
    private string[] petsSearch =
    {
        "Dog", "Cat", "Fish", "Bird",
        "Hamster", "Rabbit", "Snake", "Turtle",
        "Guinea Pig", "Lizard", "Ferret", "Mouse",
        "Horse", "Goat", "Pig", "Chicken",
        "Duck", "Gecko", "Hermit Crab", "Tarantula",
        "Chinchilla", "Parrot", "Gerbil", "Squirrel",
        "Hedgehog", "Frog", "Axolotl", "Fennec Fox",
        "Sugar Glider", "Rat", "Iguana", "Goldfish",
        "Cockatiel", "Canary", "Betta Fish", "Budgerigar",
        "Cockatoo", "Guppy", "Koi Fish", "Lovebird",
        "Mice", "Pigeon", "Rat", "Cow",
        "Tarantula", "Platypus", "Bearded Dragon", "Tortoise",
        "Capybara", "Octopus", "Chameleon", "Alpaca",
        "Miniature Pig", "Salamander", "Sugar Bear", "Wallaby",
    };
    private string? searchTerm = "";

    // function to support real time loading of animals as the content of search bar changes 
    private async Task HandleValueChanged(string newValue)
    {
        Console.WriteLine("WE ARE HANDLING THE VALUE CHANGED");
        searchTerm = newValue; // Update the searchTerm property with the value from the text box
        await Search2(searchTerm);
        Console.WriteLine(searchTerm);
        if (string.IsNullOrEmpty(searchTerm) || searchTerm == "")
        {
            await LoadPets(); // Load pets when the text box is empty
        }

        try
        {
            // Make a GET request to your API endpoint
            var responseStream = await Http.GetStreamAsync($"https://localhost:7128/api/Pet");

            // Deserialize the JSON response to a list of Pet objects
            petsSearchResponse = await JsonSerializer.DeserializeAsync<List<Pet>>(responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            pets.Clear();
            if (searchTerm != "")
            {
                foreach (Pet pet in petsSearchResponse)
                {
                    //if (pet.Species.ToLower() == searchTerm.ToLower())
                    if (pet.Species.ToLower().StartsWith(searchTerm.ToLower()) && Convert.ToDateTime(pet.StartDate) >= DateTime.Today)
                    {
                        if (pet.Status == "Created") {
                            pets.Add(pet);
                        }
                    }
                }
            }
            else
            {
                // Handle the case when petsSearchResponse is null
                await LoadPets();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error searching for species:", ex.Message);
            pets = null;
        }

    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);
        Console.WriteLine($"the search term in Search2 function {searchTerm}");
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return petsSearch.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private bool isMapView = false;
    private List<Pet> pets;
    private List<Pet> petsSearchResponse;
    public class Pet
    {
        [DynamoDBHashKey("id")]
        public string? Id { get; set; }

        [DynamoDBRangeKey("username")]
        public string? Username { get; set; }

        [DynamoDBProperty("name")]
        public string? Name { get; set; }

        [DynamoDBProperty("species")]
        public string? Species { get; set; }

        [DynamoDBProperty("description")]
        public string? Description { get; set; }

        [DynamoDBProperty("address")]
        public string? Address { get; set; }

        [DynamoDBProperty("photoUrl")]
        public string? PhotoUrl { get; set; }

        [DynamoDBProperty("startDate")]
        public string? StartDate { get; set; }

        [DynamoDBProperty("endDate")]
        public string? EndDate { get; set; }

        [DynamoDBProperty("price")]
        public string? Price { get; set; }

        [DynamoDBProperty("price_id")]
        public string? PriceId { get; set; }

        [DynamoDBProperty("status")]
        public string? Status { get; set; } //Created -> Payment -> Reserved -> Fulfilled

        [DynamoDBProperty("client")]
        public string? Client { get; set; }

        [DynamoDBProperty("comments")]
        public List<string>? Comments { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("going to call pets");
        await LoadPets();
    }


    // uses fields as payload to HTTP GET request, ENSURE WEB API IS RUNNING SO REQUEST IS RECEIVED, will add product to our DynamoDB Table
    private async Task LoadPets()
    {
        try
        {
            // Make a GET request to your API endpoint
            var responseStream = await Http.GetStreamAsync("https://localhost:7128/api/Pet");
            Console.WriteLine(responseStream);
            // Deserialize the JSON response to a list of Product objects
            Console.WriteLine("all pets to be loaded");
            List<Pet> allPets = await JsonSerializer.DeserializeAsync<List<Pet>>(responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            pets = allPets.Where(pet =>
            {
                DateTime startDate;
                return DateTime.TryParse(pet.StartDate, out startDate) && startDate >= DateTime.Today;
            }).ToList();

            foreach (Pet singlePet in pets)
            {
                Console.WriteLine(singlePet.Name);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading products:", ex.Message);
            pets = null;
        }
    }

    private Task ShowMap()
    {
        NavigationManager.NavigateTo("/map");
        return Task.CompletedTask;
    }

    private void NavigateToDetails(string petId, string username)
    {
        NavigationManager.NavigateTo($"/pet-details/{petId}/{username}");
    }



    private async Task HandleTextBoxInput(ChangeEventArgs e)
    {

        searchTerm = e.Value?.ToString(); // Update the searchTerm property with the value from the text box

        Console.WriteLine(searchTerm);
        if (string.IsNullOrEmpty(searchTerm))
        {
            await LoadPets(); // Load pets when the text box is empty
        }

        try
        {
            // Make a GET request to your API endpoint
            var responseStream = await Http.GetStreamAsync($"https://localhost:7128/api/Pet");

            // Deserialize the JSON response to a list of Pet objects
            petsSearchResponse = await JsonSerializer.DeserializeAsync<List<Pet>>(responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            pets.Clear();
            if (searchTerm != "")
            {
                foreach (Pet pet in petsSearchResponse)
                {
                    //if (pet.Species.ToLower() == searchTerm.ToLower())
                    if (pet.Species.ToLower().StartsWith(searchTerm.ToLower()))
                    {

                        pets.Add(pet);
                    }
                }
            }
            else
            {
                // Handle the case when petsSearchResponse is null
                await LoadPets();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error searching for species:", ex.Message);
            pets = null;
        }
    }


    static string ExtractUsername(string email)
    {
        string[] parts = email.Split('@');
        return parts[0];
    }

    private void ToggleMapView()
    {
        NavigationManager.NavigateTo($"/map");
    }




}

